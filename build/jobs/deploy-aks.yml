
parameters:
- name: version
  type: string
- name: dataStore
  type: string
- name: subscription
  type: string
- name: clusterName
  type: string
- name: clusterResourceGroup
  type: string
- name: clusterLocation
  type: string
- name: testEnvironmentUrl
  type: string
- name: imageTag
  type: string
- name: dnsSuffix
  type: string

jobs:
- job: provisionServiceWithHelm
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: resolute-oss-tenant-info'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: 'resolute-oss-tenant-info'

  - task: AzureCLI@2
    displayName: 'Azure CLI: InlineScript'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az aks get-credentials --name ${{parameters.clusterName}} --resource-group ${{parameters.clusterResourceGroup}}

        helmChartPath="$(System.DefaultWorkingDirectory)/samples/kubernetes/helm/fhir-server/"
        corsPath="$(System.DefaultWorkingDirectory)/test/Configuration/corstestconfiguration.json"
        corsOrigins=`cat $corsPath | jq -r '.FhirServer.Cors.Origins | @csv' | tr -d '"'`
        corsMethods=`cat $corsPath | jq -r '.FhirServer.Cors.Methods | @csv' | tr -d '"'`
        corsHeaders=`cat $corsPath | jq -r '.FhirServer.Cors.Headers | @csv' | tr -d '"'`
        corsMaxAge=`cat $corsPath | jq -r '.FhirServer.Cors.MaxAge'`        
        repositoryName=`echo $(azureContainerRegistry)/${{parameters.version}}_fhir-server | tr '[:upper:]' '[:lower:]'`
        releaseName=`echo "$(DeploymentEnvironmentName)-${{parameters.version}}-${{parameters.dataStore}}" | tr '[:upper:]' '[:lower:]'`
        hostName=`echo "${releaseName}.${{parameters.dnsSuffix}}" | tr '[:upper:]' '[:lower:]'`
        tenantId="$(tenant-id)"

        # Create pod identity and storage account
        SUBSCRIPTION_ID=$(az account show | jq -r .id)
        IDENTITY_NAME=$releaseName
        az identity create -g ${{parameters.clusterResourceGroup}} -n $IDENTITY_NAME --subscription $SUBSCRIPTION_ID
        IDENTITY_CLIENT_ID="$(az identity show -g ${{parameters.clusterResourceGroup}} -n $IDENTITY_NAME --subscription $SUBSCRIPTION_ID --query clientId -otsv)"
        IDENTITY_RESOURCE_ID="$(az identity show -g ${{parameters.clusterResourceGroup}} -n $IDENTITY_NAME --subscription $SUBSCRIPTION_ID --query id -otsv)"
        PRINCIPAL_ID="$(az identity show -g ${{parameters.clusterResourceGroup}} -n $IDENTITY_NAME --subscription $SUBSCRIPTION_ID --query principalId -otsv)"

        STORAGE_ACCOUNT_NAME=$(echo $releaseName | tr -d '-' | cut -c1-24)
        az storage account create -g ${{parameters.clusterResourceGroup}} -n $STORAGE_ACCOUNT_NAME
        STORAGE_ACCOUNT_ID=$(az storage account show -g ${{parameters.clusterResourceGroup}} -n $STORAGE_ACCOUNT_NAME | jq -r .id)
        BLOB_URI=$(az storage account show -g ${{parameters.clusterResourceGroup}} -n $STORAGE_ACCOUNT_NAME | jq -r .primaryEndpoints.blob)

        # Note, we are using --assignee-object-id here to avoid problems with DevOps service principal credentials not having read access to the Graph
        # https://medium.com/microsoftazure/how-to-perform-role-assignments-on-azure-resources-from-an-azure-devops-pipeline-c9f4dc10d0a4
        az role assignment create --role "Storage Blob Data Contributor" --assignee-object-id $PRINCIPAL_ID --assignee-principal-type ServicePrincipal --scope $STORAGE_ACCOUNT_ID

        cat <<EOF > release-values.yaml
        image:
          repository: $repositoryName
          tag: ${{parameters.imageTag}}
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
        ingress:
          enabled: true
          annotations:
            kubernetes.io/ingress.class: nginx
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/proxy-body-size: 10m
            nginx.ingress.kubernetes.io/enable-cors: "true"
            nginx.ingress.kubernetes.io/cors-allow-origin: "${corsOrigins}"
            nginx.ingress.kubernetes.io/cors-allow-methods: "${corsMethods}"
            nginx.ingress.kubernetes.io/cors-allow-headers: "${corsHeaders}"
            nginx.ingress.kubernetes.io/cors-max-age: "${corsMaxAge}"
          hosts:
            - host: $hostName
              paths:
                  - /
          tls:
            - secretName: aks-oss-tls
              hosts:
                - $hostName
        database:
          dataStore: ${{parameters.dataStore}}
          resourceGroup: ${{parameters.clusterResourceGroup}}
          location: ${{parameters.clusterLocation}}
          sqlContainer:
            acceptEula: "Y"
            resources:
              requests:
                cpu: 500m
                memory: 2000Mi
        podIdentity:
          enabled: true
          identityClientId: $IDENTITY_CLIENT_ID
          identityResourceId: $IDENTITY_RESOURCE_ID
        export:
          enabled: true
          blobStorageUri: $BLOB_URI
        security:
          enabled: true
          enableAadSmartOnFhirProxy: false
          authority: https://login.microsoftonline.com/${tenantId}
          audience: ${{ parameters.testEnvironmentUrl }}
        EOF

        # Debug output of release values
        cat release-values.yaml

        helm upgrade --install $releaseName $helmChartPath \
          -f release-values.yaml \
          --wait --timeout 20m

        helm list
        kubectl get svc "$releaseName-fhir-server"
